import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { signIn, signOut, useSession } from "next-auth/react";

import { api } from "y/utils/api";
import Sidebar from "components/Sidebar";

const Home: NextPage = () => {
  const hello = api.example.hello.useQuery({ text: "from tRPC" });
  const { data, isLoading } = api.posts.getAll.useQuery();

  if (!data || isLoading) return <div>Loading ...</div>;
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="mx-auto flex h-screen min-h-screen max-w-7xl justify-center">
        {/* SideBar */}
        <Sidebar />
        {/* Feed */}
        {/* <div className="h-full w-full border-x border-slate-200   md:max-w-2xl"> */}
        {/* <div className="flex flex-col border-b border-slate-400 px-8"> */}
        {/* <CreatePost /> */}
        {/* <AuthShowcase /> */}
        {/* </div> */}
        {/* <div> */}
        {/* {data.map((post) => ( */}
        {/* <div key={post.id} className="border-b border-slate-400 p-8"> */}
        {/* {post.content} */}
        {/* </div> */}
        {/* ))} */}
        {/* </div> */}
        {/* </div> */}
      </main>
    </>
  );
};

export default Home;

const AuthShowcase: React.FC = () => {
  const { data: sessionData } = useSession();

  const { data: secretMessage } = api.example.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined }
  );

  return (
    <div>
      {/* <p className="text-center text-2xl text-white"> */}
      {/* {sessionData && <span>Logged in as {sessionData.user?.name}</span>} */}
      {/* {secretMessage && <span> - {secretMessage}</span>} */}
      {/* </p> */}
      <button
        className="rounded-full bg-white/10 px-4 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={sessionData ? () => void signOut() : () => void signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
};

const CreatePost = () => {
  const { data: sessionData } = useSession();
  if (!sessionData?.user) return null;

  const image = sessionData.user.image ? sessionData.user.image : "";

  return (
    <div className="flex gap-8 ">
      <img
        src={image}
        alt="Profile Picture"
        className="h-14 w-14 rounded-full"
      ></img>
      <input
        placeholder="Tweet!"
        className="w-full border-none bg-transparent "
      />
    </div>
  );
};
